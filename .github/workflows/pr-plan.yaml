name: PR Plan

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  id-token: write           # OIDC for Azure
  contents: read
  pull-requests: write      # so we can comment
  actions: read             # (optional) not needed here, but fine

env:
  ARM_USE_OIDC: "true"
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  TF_IN_AUTOMATION: "true"

jobs:
  plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./azure

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: Init
        run: tofu init -upgrade

      - name: Format (auto-fix)
        run: tofu fmt -recursive

      - name: Validate
        run: tofu validate

      - name: Plan (produce saved plan)
        id: plan
        run: |
          set -e
          tofu plan -out=plan.tfplan -input=false -compact-warnings
          # Create a small JSON summary for the PR comment
          tofu show -json plan.tfplan > plan.json
          jq -r '
            .resource_changes
            | (map(.change.actions) | flatten) as $a
            | {
                creates: ($a | map(select(.=="create")) | length),
                updates: ($a | map(select(.=="update")) | length),
                deletes: ($a | map(select(.=="delete")) | length)
              }
          ' plan.json > counts.json
          # Build a markdown comment (top 20 changed resources)
          {
            echo "### OpenTofu Plan Summary"
            echo
            echo "\`adds\` **$(jq -r .creates counts.json)**  |  \`updates\` **$(jq -r .updates counts.json)**  |  \`deletes\` **$(jq -r .deletes counts.json)**"
            echo
            echo "<details><summary>Changed resources (top 20)</summary>"
            echo
            jq -r '
              .resource_changes
              | map({addr: .address, act: ( .change.actions | join("/") )})
              | .[:20]
              | (["Action","Address"], ["-----","-------"]),
                (map([.act, .addr])[])
              | @tsv
            ' plan.json | awk 'BEGIN{print ""; print "| Action | Address |"; print "|---|---|"} {printf("| `%s` | `%s` |\n",$1,$2)}'
            echo
            echo "</details>"
          } > ../pr_comment.md

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('pr_comment.md', 'utf8');
            const {owner, repo, number} = context.issue;
            // Upsert: if bot already commented, update it; otherwise create
            const comments = await github.rest.issues.listComments({owner, repo, issue_number: number});
            const mine = comments.data.find(c => c.user.type === 'Bot' && c.body && c.body.includes('OpenTofu Plan Summary'));
            if (mine) {
              await github.rest.issues.updateComment({owner, repo, comment_id: mine.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number: number, body});
            }

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: plan-${{ github.event.pull_request.number }}
          path: |
            azure/plan.tfplan
            azure/plan.json
            azure/counts.json
          if-no-files-found: error
          retention-days: 14
